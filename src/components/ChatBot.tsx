import { useState, useRef, useEffect } from 'react';
import ChatMessage from './ChatMessage';
import ChatInput from './ChatInput';
import ChatHeader from './ChatHeader';
import ImageUpload from './ImageUpload';
import ExpertConnect from './ExpertConnect';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Camera, Users, X } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

// Mock responses in Malayalam and English for demonstration
const mockResponses = [
  {
    keywords: ['‡¥ï‡µÄ‡¥ü‡¥®‡¥æ‡¥∂‡¥ø‡¥®‡¥ø', 'pesticide', '‡¥ï‡µÄ‡¥ü‡¥Ç', 'pest'],
    response: '‡¥ï‡µÄ‡¥ü‡¥®‡¥æ‡¥∂‡¥ø‡¥®‡¥ø ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥∏‡µÅ‡¥∞‡¥ï‡µç‡¥∑‡¥æ ‡¥®‡¥ø‡µº‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥ô‡µç‡¥ô‡µæ ‡¥™‡¥æ‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç. ‡¥Ö‡¥≥‡¥µ‡µç ‡¥∂‡µç‡¥∞‡¥¶‡µç‡¥ß‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. For pest control, use organic neem oil or consult your local agricultural officer for appropriate pesticides.',
  },
  {
    keywords: ['‡¥®‡µÜ‡µΩ‡¥ï‡µÉ‡¥∑‡¥ø', 'rice', '‡¥Ö‡¥∞‡¥ø', 'paddy'],
    response: '‡¥®‡µÜ‡µΩ‡¥ï‡µÉ‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥§‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥µ‡µÅ‡¥Ç ‡¥µ‡¥≥‡¥µ‡µÅ‡¥Ç ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡¥æ‡¥£‡µç. ‡¥Æ‡µ∫‡¥∏‡µÇ‡µ∫ ‡¥ï‡¥æ‡¥≤‡¥§‡µç‡¥§‡µç ‡¥®‡¥ü‡µÅ‡¥ï. Rice cultivation requires proper water management and fertilization. Plant during monsoon season for best results.',
  },
  {
    keywords: ['‡¥µ‡¥≥', 'fertilizer', '‡¥ï‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç', 'compost'],
    response: '‡¥ú‡µà‡¥µ ‡¥µ‡¥≥‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥®‡¥≤‡µç‡¥≤‡¥§‡¥æ‡¥£‡µç. ‡¥ï‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥µ‡¥≥‡¥Ç ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡¥±‡¥æ‡¥ï‡µç‡¥ï‡¥æ‡¥Ç. Organic fertilizers improve soil health. You can prepare compost at home using kitchen waste and farm residues.',
  },
  {
    keywords: ['‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•', 'weather', '‡¥Æ‡¥¥', 'rain'],
    response: '‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•‡¥æ ‡¥µ‡µç‡¥Ø‡¥§‡¥ø‡¥Ø‡¥æ‡¥®‡¥§‡µç‡¥§‡µã‡¥ü‡µç ‡¥™‡µä‡¥∞‡µÅ‡¥§‡µç‡¥§‡¥™‡µç‡¥™‡µÜ‡¥ü‡¥æ‡µª ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥∞‡µÄ‡¥§‡¥ø‡¥ï‡µæ ‡¥Æ‡¥æ‡¥±‡µç‡¥±‡¥£‡¥Ç. Weather monitoring is important for farming. Use weather apps and follow meteorological department updates for better crop planning.',
  },
];

const getRandomResponse = (userMessage: string): string => {
  const lowerMessage = userMessage.toLowerCase();
  
  // Find matching response based on keywords
  const matchingResponse = mockResponses.find(response =>
    response.keywords.some(keyword => lowerMessage.includes(keyword))
  );
  
  if (matchingResponse) {
    return matchingResponse.response;
  }
  
  // Default responses
  const defaultResponses = [
    '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥∞‡¥∏‡¥ï‡¥∞‡¥Æ‡¥æ‡¥£‡µç! ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥§‡¥∞‡¥æ‡¥Æ‡µã? That\'s an interesting question! Could you provide more details?',
    '‡¥ï‡µÉ‡¥∑‡¥ø‡¥Ø‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥™‡µç‡¥∞‡¥æ‡¥¶‡µá‡¥∂‡¥ø‡¥ï ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥ì‡¥´‡µÄ‡¥∏‡¥±‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥ï. For detailed farming information, please consult your local agricultural officer.',
    '‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥Ø‡µÅ‡¥Ç! ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥ø‡¥∂‡¥¶‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÇ. I can help you! Please ask more specific questions about farming.',
  ];
  
  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
};

const ChatBot = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç! ‡¥û‡¥æ‡µª AgroMentorAi ‡¥Ü‡¥£‡µç! ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥∏‡µç‡¥Æ‡¥æ‡µº‡¥ü‡µç‡¥ü‡µç ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø. ‡¥ö‡¥ø‡¥§‡µç‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥Ö‡¥™‡µç‚Äå‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï, ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥™‡µç‡¥∞‡¥æ‡¥¶‡µá‡¥∂‡¥ø‡¥ï ‡¥µ‡¥ø‡¥¶‡¥ó‡µç‡¥ß‡¥∞‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥∏‡¥Ç‡¥∏‡¥æ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï!\n\nHello! I\'m AgroMentorAi, your smart farming assistant. Upload crop images, ask questions, or connect with local experts!',
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [showSuggestions, setShowSuggestions] = useState(true);
  const [showImageUpload, setShowImageUpload] = useState(false);
  const [showExpertConnect, setShowExpertConnect] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    if (scrollAreaRef.current) {
      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (scrollContainer) {
        scrollContainer.scrollTop = scrollContainer.scrollHeight;
      }
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (messageText: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      text: messageText,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    setShowSuggestions(false);

    // Simulate AI response delay
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: getRandomResponse(messageText),
        isUser: false,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, botResponse]);
      setIsLoading(false);
    }, 1000 + Math.random() * 2000); // 1-3 seconds delay
  };

  const handleImageUpload = (imageData: string, description: string) => {
    const imageMessage: Message = {
      id: Date.now().toString(),
      text: `üì∏ Image uploaded: ${description}`,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, imageMessage]);
    setIsLoading(true);
    setShowImageUpload(false);

    // Simulate AI image analysis
    setTimeout(() => {
      const analysisResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: '‡¥ö‡¥ø‡¥§‡µç‡¥∞‡¥Ç ‡¥µ‡¥ø‡¥∂‡¥ï‡¥≤‡¥®‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µÅ! ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥µ‡¥ø‡¥≥‡¥Ø‡¥ø‡µΩ ‡¥á‡¥≤‡¥™‡µç‡¥™‡µä‡¥≥‡µç‡¥≥‡µΩ ‡¥∞‡µã‡¥ó‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥≤‡¥ï‡µç‡¥∑‡¥£‡¥ô‡µç‡¥ô‡µæ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥®‡µÅ. ‡¥ï‡µã‡¥™‡µç‡¥™‡µº ‡¥∏‡µæ‡¥´‡µá‡¥±‡µç‡¥±‡µç ‡¥∏‡µç‡¥™‡µç‡¥∞‡µá ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.\n\nImage analyzed! I can see signs of leaf blight in your crop. Spray copper sulfate solution for treatment. Also ensure proper drainage and avoid overhead watering.',
        isUser: false,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, analysisResponse]);
      setIsLoading(false);
    }, 2000);
  };

  return (
    <div className="flex flex-col h-screen max-w-4xl mx-auto bg-chat-background">
      <ChatHeader />
      
      {/* Feature Buttons */}
      <div className="flex gap-2 px-4 py-2 border-b border-border">
        <Button
          variant="outline"
          size="sm"
          onClick={() => setShowImageUpload(!showImageUpload)}
          className="gap-2"
        >
          <Camera className="h-4 w-4" />
          Upload Image
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => setShowExpertConnect(!showExpertConnect)}
          className="gap-2"
        >
          <Users className="h-4 w-4" />
          Local Experts
        </Button>
      </div>

      {/* Image Upload Panel */}
      {showImageUpload && (
        <Card className="mx-4 my-2 p-4 relative">
          <Button
            variant="ghost"
            size="icon"
            className="absolute top-2 right-2 h-6 w-6"
            onClick={() => setShowImageUpload(false)}
          >
            <X className="h-4 w-4" />
          </Button>
          <ImageUpload onImageUpload={handleImageUpload} />
        </Card>
      )}

      {/* Expert Connect Panel */}
      {showExpertConnect && (
        <Card className="mx-4 my-2 p-4 relative max-h-80 overflow-y-auto">
          <Button
            variant="ghost"
            size="icon"
            className="absolute top-2 right-2 h-6 w-6"
            onClick={() => setShowExpertConnect(false)}
          >
            <X className="h-4 w-4" />
          </Button>
          <ExpertConnect />
        </Card>
      )}
      
      <ScrollArea ref={scrollAreaRef} className="flex-1 px-4 py-2">
        <div className="space-y-2">
          {messages.map((message) => (
            <ChatMessage
              key={message.id}
              message={message.text}
              isUser={message.isUser}
              timestamp={message.timestamp}
            />
          ))}
          
          {showSuggestions && messages.length === 1 && (
            <div className="space-y-3 my-4">
              <p className="text-muted-foreground text-sm text-center">Try these common questions:</p>
              <div className="grid gap-2">
                {[
                  "‡¥é‡¥®‡µç‡¥±‡µÜ ‡¥®‡µÜ‡µΩ‡¥µ‡¥Ø‡¥≤‡¥ø‡µΩ ‡¥ï‡µÄ‡¥ü‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥£‡µç‡¥ü‡µç, ‡¥é‡¥®‡µç‡¥§‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç? (Pests in my rice field)",
                  "‡¥Æ‡µÅ‡¥≥‡¥ï‡µç ‡¥ï‡µÉ‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥é‡¥§‡µç‡¥∞ ‡¥µ‡¥≥ ‡¥µ‡µá‡¥£‡¥Ç? (Fertilizer for chili cultivation)", 
                  "‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥Æ‡¥æ‡¥±‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥é‡¥®‡µç‡¥§‡µç ‡¥∂‡µç‡¥∞‡¥¶‡µç‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç? (Weather change precautions)"
                ].map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => handleSendMessage(suggestion.split('(')[0].trim())}
                    className="text-left p-3 bg-muted/50 hover:bg-muted rounded-lg border border-border text-sm transition-colors"
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            </div>
          )}
          
          {isLoading && (
            <div className="flex justify-start mb-4">
              <div className="bg-bot-message border border-border rounded-2xl rounded-bl-md px-4 py-3 max-w-[75%]">
                <div className="flex space-x-2">
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      <ChatInput onSendMessage={handleSendMessage} isLoading={isLoading} />
    </div>
  );
};

export default ChatBot;